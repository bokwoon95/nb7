fs.go
schema.go
notebrew.go
error.go
template.go
signup.go
login.go
logout.go
resetpassword.go
folder.go
file.go
createsite.go
deletesite.go
delete.go
createnote.go
createpost.go
createcategory.go
createfolder.go
createpage.go
createfile.go
clipboard.go
rename.go
...
serve_http.go
new.go

Search Indexing => RSS => publish

TODO: rss reader (notebrew.com/admin/rss)
TODO: should notebrew.com be the catch-all website? So people go there to browse rss stuff like they do HN, discover new posts, etc. But my main issue is that it would tread over the toes of the main site i.e. what if someone hosts notebrew on just one domain? All the dynamic stuff has to be squirrelled away into example.com/admin/, not example.com
TODO: why does clicking a *.html.gz file hang and then 404? What's being calculated here?
TODO: rethink error codes: I don't like how some validation errors are also standalone errors, maybe merge them together and split them by some other fault line
TODO: what if the generated pages are compressed, does file.go still handle displaying the contents transparently? main use case are the generated index.html.gz files.
TODO: CLI usage: notebrew createpost, notebrew createnote "this is a new note" -site bokwoon -category breh -slug "weegee"
TODO: allow users to update their email address, but whenever that happens send a message to the old email with a password reset link (add new columns: users.old_email, users.old_email_reset_token_hash) that is invalidated after like 30 days. So if the user has their email changed by an attacker they have up to 30 days to take back control. Once a new password is set, the email reverts back to the old one. Actually maybe leave it valid permamently.
TODO: upload files, download themes from github
- output/themes dropdown > download theme > enter URL > uses go-git to clone a repo from github.
- downloadtheme.go/downloadtheme.html
TODO: coalesce the following into a single "site" tab in the menu bar
- the link to the content site
- the storage used and storage breakdown
- site-wide search
TODO: regenerate.go
TODO: conservative rendering by default:
- creating a post merely generates the post page plus the category list page
- updating a post merely updates the post page
- deleting a post merely deletes the post page plus updates the category list page
- creating a page merely generates the page
- updating a page merely updates the page
- deleting a page merely deletes the page
- updating a theme template updates the template, but also offers the user the option to regenerate the whole site (or they can surgically regenerate specific pages instead).
- In the admin page, there is a dropdown menu next to the site that says "regenerate site" (above "delete site")
- This is the piece de resistance: for each page, there is an item dropdown menu allowing the user to regenerate specific pages (the user can also select multiple pages and click "regenerate"). This means we can avoid whole-site rendering most of the time.
TODO: top left corner now links to the admin domain, followed by the relevant ContentSiteURL is present.
TODO: cut | copy | paste | rename (no need for link indexing and rewriting yet, that comes later)
TODO: notes/posts/pages/themes search indexing
TODO: notebrew.com/admin/journal/
TODO: time to clone and get your hands dirty with https://github.com/blugelabs/bluge_examples/, I think.
TODO: get bluge's filesystem implementation working with those three txt files, then use a shortcut: if we can fmt.Sprintf the FS into on an existing directory on disk, use the filesystem implementation directly. Otherwise, dip into the database-backed filesystem instead. (actually, you can refer to online examples of how people use s3/minio as the backing storage).
TODO: forbidden technique: if we inline styles.css and baseline.js we can get screaming fast speeds by making only one trip to the server. codemirror.js still has to be loaded separately because it's too big to be loaded over and over again whenever a page changes (styles.css and baseline.js literally only add a few bytes to the final payload)
    - For maxxx speed, we can calculate the hash of styles.css and baseline.js once on startup in an init function and store the result in a global variable, then subsequent calls will all use those variables.
TODO: extract the setting of Content-Security-Policy in executeTemplate (and all error handlers) into a separate function where cdn sources will be dynamically added to script-src, img-src, style-src, font-src and media-src if provided.

TOFIX:
- for each js script loaded, add a top level comment explaining what it does so it doesn't seem like you are loading in a bunch of scripts for nothing like a filthy js dev.
- Hm I really do want some site availibility metrics, bare minimum being how many requests in a time period and stuff.
    - I need a metric for traffic but I also need a metric for latency per request (so I can compare the before and after of upgrading the server to a more powerful CPU or something).
- For the output folder, auto-collapse all folder/index.html entries into an "folder/index.html" entry.
- we might be able to tweak the site generation code such that both abcd/index.html and abcd.html generate the same path, with precedence given to abcd.html.
- Don't calculate the number of folders and files for anything in the output folder (other than themes)
- We might make (TemplateError).ToList() return []Error instead, and maybe rename it to .Errors() []Error.
- the navbar for createcategory/createsite/etc is broken on mobile on small screens.
- also etag pictures and fonts, even if you dont gzip
- the alert x button in folder.html is off center/unbalanced compared to the text on the other side.
- don't truncate the title for posts/notes in the folder page, just wrap (safe? good idea?)

TODO: we need cross-handler tests to check for nil DB == 404, Content-Type headers are all set appropriately, etc.
