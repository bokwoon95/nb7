fs.go
schema.go
notebrew.go
error.go
signup.go
login.go
logout.go
resetpassword.go
folder.go
file.go
createsite.go
deletesite.go
delete.go
createnote.go
createpost.go
createcategory.go
createfolder.go
createpage.go
createfile.go
clipboard.go
rename.go
...
serve_http.go
new.go

Search Indexing => Link Indexing and rewrites => PWA => publish
the last thing would probably be to make the site into a usable PWA on iOS then you're done, you can publish it to the world.

TODO: why does clicking a *.html.gz file hang and then 404? What's being calculated here?
TODO: rethink error codes: I don't like how some validation errors are also standalone errors, maybe merge them together and split them by some other fault line
TODO: what if the generated pages are compressed, does file.go still handle displaying the contents transparently?
TODO: notebrew createpost, notebrew createnote "this is a new note" -site bokwoon -category breh -slug "weegee"
TODO: allow users to update their email address, but whenever that happens send a message to the old email with a password reset link (add new columns: users.old_email, users.old_email_reset_token_hash) that is invalidated after like 30 days. So if the user has their email changed by an attacker they have up to 30 days to take back control. Once a new password is set, the email reverts back to the old one.
TODO: upload files, download themes from github
- output/themes dropdown > download theme > enter URL > uses go-git to clone a repo from github.
- downloadtheme.go/downloadtheme.html
TODO: coalesce the following into a single "site" tab in the menu bar
- the link to the content site
- the storage used and storage breakdown
- site-wide search
TODO: cut | copy | paste | rename (no need for link indexing and rewriting yet, that comes later)
TODO: re-render the whole site whenever a html file in output/themes gets updated.
TODO: render post.html on post.md creation/update/delete. This requires implementing the default posts.html and post.html templates.

output folder trails pages and posts
on page creation => generate output page
on page update => update output output
on page deletion => delete output page
on post creation => generate output post
on post update => update output post
on post deletion => delete output post

on theme template update => update *all* pages, update *all* posts

TODO: we need cross-handler tests to check for nil DB == 404, Content-Type headers are all set appropriately, etc.

TODO: S3FS with an optional CDN cache in front of it for everything inside a site/ directory. What happens is that after a site html file is generated, an extra CDN URL rewriting layer crawls the HTML and rewrites all content links to CDN links instead. The user can enable/disable this automatic postprocessing step anytime, and they can also visit any page and toggle CDN links/server links on a per-page basis. And whenever a new copy of the html file is generated to s3, notebrew also cache-busts the CDN link.
